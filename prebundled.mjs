class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}const s={S:null,QH:new class{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,n]=this.Q[e];if(this.Q.shift(),n&&await t.T(n),t.IA(s)){await s();break}s();break}this.IR=!1}},D:!1,B:"hf_ss:binded_value",E:"hf_ss:binded_event"};class n{S=[];V_;constructor(t,e=void 0,n=document){this.V_=t,e&&new o((async()=>{((t,e,n,o)=>{const i=Array.from(n.querySelectorAll(`[${e}]`));if(n instanceof ShadowRoot||n instanceof Document||!n.hasAttribute(e)||i.push(n),i)for(let n=0;n<i.length;n++){const r=i[n];t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const c=(r.getAttribute(e)??"").split(";");for(let e=0;e<c.length;e++){const n=c[e];try{if(!(n in r))throw"";if(r[n]=t,"value"===n&&"value"in r&&r.parentNode&&!r.hasAttribute(s.B)){r.setAttribute(s.B,"");const t=()=>{o.value=r.value};r.addEventListener("input",t),new MutationObserver(((e,s)=>{for(let n of e)if("childList"===n.type)for(let e of n.removedNodes)if(e===r)return r.removeEventListener("input",t),void s.disconnect()})).observe(r.parentNode,{childList:!0})}}catch(e){r.setAttribute(n,t)}}}})(this.value,e,n,this)}))}get value(){return s.S&&!this.S.some((t=>t===s.S))&&this.S.push(s.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&s.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),s.D)))}}class o{constructor(t){s.QH.A(new e((async()=>{s.S=t,await t(),s.S=null}),s.D))}}window.Lifecycle=class{constructor(t,n,o=document){const i=`[${t}]`,r=()=>{const r=Array.from(o.querySelectorAll(i));if(o instanceof ShadowRoot||o instanceof Document||!o.hasAttribute(t)||r.push(o),r)for(let t=0;t<r.length;t++){const o=r[t];o.hasAttribute(s.E)||(o.setAttribute(s.E,""),s.QH.A(new e((async()=>{if(!o.parentNode)return;const t=await n(o);new MutationObserver(((n,i)=>{for(let r of n)if("childList"===r.type)for(let n of r.removedNodes)if(n===o)return void s.QH.A(new e((async()=>{await t(),i.disconnect()})))})).observe(o.parentNode,{childList:!0})}))))}};new MutationObserver(((t,e)=>{for(let e of t)"childList"===e.type&&r()})).observe(o,{childList:!0,subtree:!0}),r()}},window.Let=n,window.$=o,window.Derived=class extends n{constructor(t,e=void 0,s=document){super("",e,s),new o((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.log("you are not allowed to change derived value manually")}},window.OnViewPort=class{constructor(t,e,s=document){this.OnViewCallback=e;const n=`[${t}]`,o=s.querySelectorAll(n);o&&o.forEach((t=>{(t=>{let e=null;const s=new IntersectionObserver((n=>{const o=()=>s.disconnect();n.forEach((async s=>{s.isIntersecting?e=await t(s,o):s.isIntersecting||"function"!=typeof e||await e()}))}),{threshold:[0,1]});return s})(e).observe(t)}))}};
