class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}class s{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,n]=this.Q[e];if(this.Q.shift(),n&&await t.T(n),t.IA(s)){await s();break}s();break}this.IR=!1}}const n=new class{S=null;QH=new s;D=!1;P="hf_ss:binded_viewport";PX="hf_ss:binded_viewport_on_exit";V="hf_ss:binded_value";C="hf_ss:binded_lifecycle"};class o{S=[];V_;constructor(t,e=void 0,s=document){this.V_=t,e&&new r((async()=>{((t,e,s,o)=>{const r=Array.from(s.querySelectorAll(`[${e}]`));if(s instanceof ShadowRoot||s instanceof Document||!s.hasAttribute(e)||r.push(s),r)for(let s=0;s<r.length;s++){const i=r[s];t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const c=(i.getAttribute(e)??"").split(";");for(let e=0;e<c.length;e++){const s=c[e];try{if(!(s in i))throw"";if(i[s]=t,"value"===s&&"value"in i&&i.parentNode&&!i.hasAttribute(n.V)){i.setAttribute(n.V,"");const t=()=>{o.value=i.value};i.addEventListener("input",t),new MutationObserver(((e,s)=>{for(let n of e)if("childList"===n.type)for(let e of n.removedNodes)if(e===i)return i.removeEventListener("input",t),void s.disconnect()})).observe(i.parentNode,{childList:!0})}}catch(e){i.setAttribute(s,t)}}}})(this.value,e,s,this)}))}get value(){return n.S&&!this.S.some((t=>t===n.S))&&this.S.push(n.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&n.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),n.D)))}}class r{constructor(t){n.QH.A(new e((async()=>{n.S=t,await t(),n.S=null}),n.D))}}window.Lifecycle=class{constructor(t,s,o=document){const r=`[${t}]`,i=()=>{const i=Array.from(o.querySelectorAll(r));if(o instanceof ShadowRoot||o instanceof Document||!o.hasAttribute(t)||i.push(o),i)for(let t=0;t<i.length;t++){const o=i[t];o.hasAttribute(n.C)||(o.setAttribute(n.C,""),n.QH.A(new e((async()=>{if(!o.parentNode)return;const t=await s(o);new MutationObserver(((s,r)=>{for(let i of s)if("childList"===i.type)for(let s of i.removedNodes)if(s===o)return void n.QH.A(new e((async()=>{await t(),r.disconnect()}),n.D))})).observe(o.parentNode,{childList:!0})}),n.D)))}};new MutationObserver(((t,e)=>{for(let e of t)"childList"===e.type&&i()})).observe(o,{childList:!0,subtree:!0}),i()}},window.Let=o,window.Derived=class extends o{constructor(t,e=void 0,s=document){super("",e,s),new r((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.log("you are not allowed to change Derived value manually")}},window.$=r,window.OnViewPort=class{constructor(t,s,o=(async(t,e)=>{e()}),r=document){const i=r.querySelectorAll(`[${t}]`);if(!i)return;const c=new IntersectionObserver(((t,r)=>{n.QH.A(new e((async()=>{for(let e=0;e<t.length;e++){const i=t[e].target;t[e].isIntersecting?(i.setAttribute(n.PX,""),await s(i)):i.hasAttribute(n.PX)&&await o(i,(()=>r.disconnect()))}}),n.D))}),{threshold:[0,0]});for(let t=0;t<i.length;t++){const e=i[t];if(e.hasAttribute(n.P))return;e.setAttribute(n.P,""),c.observe(e)}}};
