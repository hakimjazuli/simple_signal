class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}const s={S:null,QH:new class{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,i]=this.Q[e];if(this.Q.shift(),i&&await t.T(i),t.IA(s)){await s();break}s();break}this.IR=!1}},D:!1,B:"hf_ss:binded_value",E:"hf_ss:binded_event"};class i{S=[];V_;constructor(t,e=void 0,i=document){this.V_=t,e&&new o((async()=>{((t,e,i,o)=>{const n=Array.from(i.querySelectorAll(`[${e}]`));if(i instanceof ShadowRoot||i instanceof Document||!i.hasAttribute(e)||n.push(i),n)for(let i=0;i<n.length;i++){const r=n[i];t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const a=(r.getAttribute(e)??"").split(";");for(let e=0;e<a.length;e++){const i=a[e];try{if(!(i in r))throw"";if(r[i]=t,"value"===i&&"value"in r&&r.parentNode&&!r.hasAttribute(s.B)){r.setAttribute(s.B,"");const t=()=>{o.value=r.value};r.addEventListener("input",t),new MutationObserver(((e,s)=>{for(let i of e)if("childList"===i.type)for(let e of i.removedNodes)if(e===r)return r.removeEventListener("input",t),void s.disconnect()})).observe(r.parentNode,{childList:!0})}}catch(e){r.setAttribute(i,t)}}}})(this.value,e,i,this)}))}get value(){return s.S&&!this.S.some((t=>t===s.S))&&this.S.push(s.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&s.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),s.D)))}}class o{constructor(t){s.QH.A(new e((async()=>{s.S=t,await t(),s.S=null}),s.D))}}window.Let=i,window.$=o,window.Derived=class extends i{constructor(t,e=void 0,s=document){super("",e,s),new o((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.log("you are not allowed to change derived value manually")}},window.Lifecycle=class{constructor(t,i,o=document){const n=`[${t}]`,r=()=>{const t=o.querySelectorAll(n);t&&t.forEach((t=>{t.hasAttribute(s.E)||(t.setAttribute(s.E,""),s.QH.A(new e((async()=>{if(!t.parentNode)return;const o=await i(t);new MutationObserver(((i,n)=>{for(let r of i)if("childList"===r.type)for(let i of r.removedNodes)if(i===t)return void s.QH.A(new e((async()=>{await o(),n.disconnect()})))})).observe(t.parentNode,{childList:!0})}))))}))};new MutationObserver(((t,e)=>{for(let e of t)"childList"===e.type&&r()})).observe(o,{childList:!0,subtree:!0}),r()}};
