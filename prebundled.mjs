class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}const s={S:null,QH:new class{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,o]=this.Q[e];if(this.Q.shift(),o&&await t.T(o),t.IA(s)){await s();break}s();break}this.IR=!1}},D:!1,B:"hf_ss:binded_value",E:"hf_ss:binded_event"};class o{S=[];V_;constructor(t,e=void 0,o=document){this.V_=t,e&&new n((async()=>{((t,e,o,n)=>{const i=Array.from(o.querySelectorAll(`[${e}]`));if(o instanceof ShadowRoot||o instanceof Document||!o.hasAttribute(e)||i.push(o),i)for(let o=0;o<i.length;o++){const r=i[o];t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const a=(r.getAttribute(e)??"").split(";");for(let e=0;e<a.length;e++){const o=a[e];try{if(!(o in r))throw"";if(r[o]=t,"value"===o&&"value"in r&&r.parentNode&&!r.hasAttribute(s.B)){r.setAttribute(s.B,"");const t=()=>{n.value=r.value};r.addEventListener("input",t),new MutationObserver(((e,s)=>{for(let o of e)if("childList"===o.type)for(let e of o.removedNodes)if(e===r)return r.removeEventListener("input",t),void s.disconnect()})).observe(r.parentNode,{childList:!0})}}catch(e){r.setAttribute(o,t)}}}})(this.value,e,o,this)}))}get value(){return s.S&&!this.S.some((t=>t===s.S))&&this.S.push(s.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&s.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),s.D)))}}class n{constructor(t){s.QH.A(new e((async()=>{s.S=t,await t(),s.S=null}),s.D))}}window.Let=o,window.$=n,window.Derived=class extends o{constructor(t,e=void 0,s=document){super("",e,s),new n((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.log("you are not allowed to change derived value manually")}},window.Lifecycle=class{constructor(t,o,n=document){const i=`[${t}]`,r=()=>{const r=Array.from(n.querySelectorAll(i));if(n instanceof ShadowRoot||n instanceof Document||!n.hasAttribute(t)||r.push(n),r)for(let t=0;t<r.length;t++){const n=r[t];n.hasAttribute(s.E)||(n.setAttribute(s.E,""),s.QH.A(new e((async()=>{if(!n.parentNode)return;const t=await o(n);new MutationObserver(((o,i)=>{for(let r of o)if("childList"===r.type)for(let o of r.removedNodes)if(o===n)return void s.QH.A(new e((async()=>{await t(),i.disconnect()})))})).observe(n.parentNode,{childList:!0})}))))}};new MutationObserver(((t,e)=>{for(let e of t)"childList"===e.type&&r()})).observe(n,{childList:!0,subtree:!0}),r()}};
