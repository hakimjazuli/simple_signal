class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}const s={S:null,QH:new class{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,n]=this.Q[e];if(this.Q.shift(),n&&await t.T(n),t.IA(s)){await s();break}s();break}this.IR=!1}},D:!1,B:"hf_ss:binded_value"};class n{constructor(t,n){s.QH.A(new e((async()=>{if(!t.parentNode)return;const i=await n();new MutationObserver(((n,a)=>{for(let r of n)if("childList"===r.type)for(let n of r.removedNodes)if(n===t)return void s.QH.A(new e((async()=>{await i(),a.disconnect()})))})).observe(t.parentNode,{childList:!0})})))}}class i{S=[];V_;constructor(t,e=void 0,i=document){this.V_=t,e&&new a((async()=>{((t,e,i,a)=>{const r=i.querySelectorAll(`[${e}]`);if(r)for(let i=0;i<r.length;i++){const o=r[i];t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const c=(o.getAttribute(e)??"").split(";");for(let e=0;e<c.length;e++){const i=c[e];try{if(!(i in o))throw"";if(o[i]=t,"value"===i&&"value"in o&&!o.hasAttribute(s.B)){o.setAttribute(s.B,"");const t=()=>{a.value=o.value};new n(o,(async()=>(o.addEventListener("input",t),async()=>{o.removeEventListener("input",t)})))}}catch(e){o.setAttribute(i,t)}}}})(this.value,e,i,this)}))}get value(){return s.S&&!this.S.some((t=>t===s.S))&&this.S.push(s.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&s.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),s.D)))}}class a{constructor(t){s.QH.A(new e((async()=>{s.S=t,await t(),s.S=null}),s.D))}}window.Let=i,window.$=a,window.Derived=class extends i{constructor(t,e=void 0,s=document){super("",e,s),new a((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.log("you are not allowed to change derived value manually")}},window.Lifecycle=n;
