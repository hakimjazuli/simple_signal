const t=t=>{const e={};for(const s in t)e[s]=s.toString().toLowerCase().replace(/[^a-z0-9]/g,"-").replace(/^-+|-+$/g,"").replace(/-+/g,"-");return e};class e{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class s{D;constructor(t,e=!1){this.D=[t,e]}}class n{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let t=0;t<this.Q.length;t++){const[s,n]=this.Q[t];if(this.Q.shift(),n&&await e.T(n),e.IA(s)){await s();break}s();break}this.IR=!1}}const o=new class{S=null;QH=new n;D=!1;P="hf_ss:binded_viewport";PX="hf_ss:binded_viewport_on_exit";V="hf_ss:binded_value";C="hf_ss:binded_lifecycle"};class r{constructor(t,e,n=(async(t,e)=>{e()}),r=document){const i=r.querySelectorAll(`[${t}]`);if(!i)return;const a=new IntersectionObserver(((t,r)=>{o.QH.A(new s((async()=>{for(let s=0;s<t.length;s++){const i=t[s].target;t[s].isIntersecting?(i.setAttribute(o.PX,""),await e(i)):i.hasAttribute(o.PX)&&await n(i,(()=>r.disconnect()))}}),o.D))}),{threshold:[0,0]});for(let t=0;t<i.length;t++){const e=i[t];if(e.hasAttribute(o.P))return;e.setAttribute(o.P,""),a.observe(e)}}}const i=[];new MutationObserver(((t,e)=>{for(let e of t)if("childList"===e.type)for(let t=0;t<i.length;t++)i[t]()})).observe(document,{childList:!0,subtree:!0});class a{AL;DS;O;unObserve=()=>{this.O?this.O.disconnect():console.warn("you are not allowed to un-observe from main document observer")};constructor(t,e=document){var s;this.AL=t,this.DS=e,e==document?(s=this.CE,i.some((t=>t===s))||i.push(s)):(this.O=new MutationObserver(((t,e)=>{for(let e of t)"childList"===e.type&&this.CE()})),this.O.observe(e,{childList:!0,subtree:!0})),this.CE()}CE=()=>{for(let t in this.AL){const e=this.AL[t],n=Array.from(this.DS.querySelectorAll(`[${t}]`));if(this.DS instanceof ShadowRoot||this.DS instanceof Document||!this.DS.hasAttribute(t)||n.push(this.DS),!n)return;for(let t=0;t<n.length;t++){const r=n[t];r.hasAttribute(o.C)||(r.setAttribute(o.C,""),o.QH.A(new s((async()=>{if(!r.parentNode)return;const t=await e(r);new MutationObserver(((e,n)=>{this.DS.contains(r)||o.QH.A(new s((async()=>{await t(),n.disconnect()}),o.D))})).observe(this.DS,{childList:!0,subtree:!0})}),o.D)))}}}}class c{S=[];V_;constructor(t,e=void 0,s=void 0){this.V_=t,e&&new l((async()=>{((t,e,s,n)=>{const r=Array.from(s.querySelectorAll(`[${e}]`));if(s instanceof ShadowRoot||s instanceof Document||!s.hasAttribute(e)||r.push(s),r)for(let s=0;s<r.length;s++){const i=r[s],a=(i.getAttribute(e)??"").split(";");for(let e=0;e<a.length;e++){const s=a[e];try{if(!(s in i))throw"";if(i[s]=t,"value"===s&&"value"in i&&i.parentNode&&!i.hasAttribute(o.V)){i.setAttribute(o.V,"");const t=()=>{n.value=i.value};i.addEventListener("input",t),new MutationObserver(((e,s)=>{for(let n of e)if("childList"===n.type)for(let e of n.removedNodes)if(e===i)return i.removeEventListener("input",t),void s.disconnect()})).observe(i.parentNode,{childList:!0})}}catch(e){t=JSON.stringify(t).replace(/^"(.*)"$/,"$1"),i.setAttribute(s,t)}}}})(this.value,e,s??document,this)}))}get value(){return o.S&&!this.S.some((t=>t===o.S))&&this.S.push(o.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&o.QH.A(new s((async()=>{await Promise.all(this.S.map((async t=>{try{return await t(!1)}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),o.D)))}}class l{constructor(t){o.QH.A(new s((async()=>{o.S=t,await t(!0),o.S=null}),o.D))}}class u extends c{constructor(t,e=void 0,s=void 0){super("",e,s),new l((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.warn("you are not allowed to change Derived value manually")}}class h extends c{constructor(t,e=!1){super(e),new l((async()=>{super.value,e?await t():e=!0}))}get value(){return console.warn("you are not allowed to lookup Ping value manually"),super.value}set value(t){console.warn("you are not allowed to change Ping value manually")}ping=()=>{super.value=!super.value}}window.Lifecycle=a,window.Let=c,window.Derived=u,window.Ping=h,window.$=l,window.OnViewPort=r;export{l as $,u as Derived,c as Let,a as Lifecycle,r as OnViewPort,h as Ping,t as attrHelper};
