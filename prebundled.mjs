class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}const s={S:null,QH:new class{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,a]=this.Q[e];if(this.Q.shift(),a&&await t.T(a),t.IA(s)){await s();break}s();break}this.IR=!1}},D:!1,B:"binded:with:let"};class a{S=[];V_;constructor(t,e=void 0,a=document){this.V_=t,e&&new i((async()=>{((t,e,a,i)=>{const n=a.querySelectorAll(`[${e}]`);n&&n.forEach((a=>{t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const n=(a.getAttribute(e)??"").split(";");for(let e=0;e<n.length;e++){const r=n[e];try{if(!(r in a))throw"";a[r]=t,"value"===r&&"value"in a&&!a.hasAttribute(s.B)&&(a.setAttribute(s.B,""),a.addEventListener("input",(()=>{i.value=a.value})))}catch(e){a.setAttribute(r,t)}}}))})(this.value,e,a,this)}))}get value(){return s.S&&this.S.push(s.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&s.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),s.D)))}}class i{constructor(t){s.QH.A(new e((async()=>{s.S=t,await t(),s.S=null}),s.D))}}class n extends a{constructor(t,e=void 0,s=document){super("",e,s),new i((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.log("you are not allowed to change derived value manually")}}new class t{static signal="Let";static effect="$";static derived="Derived";constructor(){window[t.signal]=a,window[t.effect]=i,window[t.derived]=n}};
