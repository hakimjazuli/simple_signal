class t{static T=t=>new Promise((e=>setTimeout(e,t)));static IA=t=>"AsyncFunction"===t.constructor.name}class e{D;constructor(t,e=!1){this.D=[t,e]}}class s{Q=[];IR=!1;A=t=>{this.P(t),this.IR||this.R()};P=t=>{this.Q.push(t.D)};R=async()=>{for(this.IR=!0;0!==this.Q.length;)for(let e=0;e<this.Q.length;e++){const[s,i]=this.Q[e];if(this.Q.shift(),i&&await t.T(i),t.IA(s)){await s();break}s();break}this.IR=!1}}const i=new class{S=null;QH=new s;D=!1;P="hf_ss:binded_viewport";PX="hf_ss:binded_viewport_on_exit";V="hf_ss:binded_value";C="hf_ss:binded_lifecycle"};const n=[];new MutationObserver(((t,e)=>{for(let e of t)if("childList"===e.type)for(let t=0;t<n.length;t++)n[t]()})).observe(document,{childList:!0,subtree:!0});class o{S=[];V_;constructor(t,e=void 0,s=document){this.V_=t,e&&new r((async()=>{((t,e,s,n)=>{const o=Array.from(s.querySelectorAll(`[${e}]`));if(s instanceof ShadowRoot||s instanceof Document||!s.hasAttribute(e)||o.push(s),o)for(let s=0;s<o.length;s++){const r=o[s];t=JSON.stringify(t).replace(/^"(.*)"$/,"$1");const c=(r.getAttribute(e)??"").split(";");for(let e=0;e<c.length;e++){const s=c[e];try{if(!(s in r))throw"";if(r[s]=t,"value"===s&&"value"in r&&r.parentNode&&!r.hasAttribute(i.V)){r.setAttribute(i.V,"");const t=()=>{n.value=r.value};r.addEventListener("input",t),new MutationObserver(((e,s)=>{for(let i of e)if("childList"===i.type)for(let e of i.removedNodes)if(e===r)return r.removeEventListener("input",t),void s.disconnect()})).observe(r.parentNode,{childList:!0})}}catch(e){r.setAttribute(s,t)}}}})(this.value,e,s,this)}))}get value(){return i.S&&!this.S.some((t=>t===i.S))&&this.S.push(i.S),this.V_}set value(t){this.V_!==t&&(this.V_=t,this.S&&i.QH.A(new e((async()=>{await Promise.all(this.S.map((async t=>{try{return await t()}catch(t){throw console.error("Error in callback:",t),t}}))).catch((t=>{console.error("Promise.all failed:",t)}))}),i.D)))}}class r{constructor(t){i.QH.A(new e((async()=>{i.S=t,await t(),i.S=null}),i.D))}}window.Lifecycle=class{AN;LC;DS;O;unObserve=()=>{this.O?this.O.disconnect():console.warn("you are not allowed to un-observe from MainObserver")};constructor(t,e,s=document){var i;this.AN=t,this.LC=e,this.DS=s,s==document?(i=this.CE,n.some((t=>t===i))||n.push(i)):(this.O=new MutationObserver(((t,e)=>{for(let e of t)"childList"===e.type&&this.CE()})),this.O.observe(s,{childList:!0,subtree:!0})),this.CE()}CE=()=>{const t=`[${this.AN}]`,s=Array.from(this.DS.querySelectorAll(t));if(this.DS instanceof ShadowRoot||this.DS instanceof Document||!this.DS.hasAttribute(this.AN)||s.push(this.DS),s)for(let t=0;t<s.length;t++){const n=s[t];n.hasAttribute(i.C)||(n.setAttribute(i.C,""),i.QH.A(new e((async()=>{if(!n.parentNode)return;const t=await this.LC(n);new MutationObserver(((s,o)=>{this.DS.contains(n)||i.QH.A(new e((async()=>{await t(),o.disconnect()}),i.D))})).observe(this.DS,{childList:!0,subtree:!0})}),i.D)))}}},window.Let=o,window.Derived=class extends o{constructor(t,e=void 0,s=document){super("",e,s),new r((async()=>{super.value=await t()}))}get value(){return super.value}set value(t){console.warn("you are not allowed to change Derived value manually")}},window.$=r,window.OnViewPort=class{constructor(t,s,n=(async(t,e)=>{e()}),o=document){const r=o.querySelectorAll(`[${t}]`);if(!r)return;const c=new IntersectionObserver(((t,o)=>{i.QH.A(new e((async()=>{for(let e=0;e<t.length;e++){const r=t[e].target;t[e].isIntersecting?(r.setAttribute(i.PX,""),await s(r)):r.hasAttribute(i.PX)&&await n(r,(()=>o.disconnect()))}}),i.D))}),{threshold:[0,0]});for(let t=0;t<r.length;t++){const e=r[t];if(e.hasAttribute(i.P))return;e.setAttribute(i.P,""),c.observe(e)}}};
